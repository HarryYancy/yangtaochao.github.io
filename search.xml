<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第三章</title>
    <url>/2022/08/02/%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="3-1-判断"><a href="#3-1-判断" class="headerlink" title="3.1 判断"></a>3.1 判断</h1><h3 id="关系运算的结果只有1（符合条件）和0（不符合条件"><a href="#关系运算的结果只有1（符合条件）和0（不符合条件" class="headerlink" title="关系运算的结果只有1（符合条件）和0（不符合条件)"></a>关系运算的结果只有1（符合条件）和0（不符合条件)</h3><p><img data-src="https://s2.loli.net/2022/08/03/m9k7nDOUCzWP3hA.png"></p>
<p><img data-src="https://s2.loli.net/2022/08/03/YBfS7sFegkOLZoc.png"></p>
<h3 id="else-总是与最近的if匹配"><a href="#else-总是与最近的if匹配" class="headerlink" title="else 总是与最近的if匹配"></a>else 总是与最近的if匹配</h3><h3 id="级联if"><a href="#级联if" class="headerlink" title="级联if"></a>级联if</h3><h1 id="3-2-分支"><a href="#3-2-分支" class="headerlink" title="3.2 分支"></a>3.2 分支</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (控制表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>;</span><br><span class="line">        语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><h3 id="控制表达式中变量必须是整形"><a href="#控制表达式中变量必须是整形" class="headerlink" title="控制表达式中变量必须是整形"></a>控制表达式中变量必须是整形</h3></li>
<li><h3 id="常量即常数和常数参与的表达式"><a href="#常量即常数和常数参与的表达式" class="headerlink" title="常量即常数和常数参与的表达式"></a>常量即常数和常数参与的表达式</h3></li>
<li><p><img data-src="https://s2.loli.net/2022/08/12/ugLyS8h3PJAZrxH.png"></p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>C</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章</title>
    <url>/2022/08/01/%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h1><p>有效变量名满足的条件:</p>
<ol>
<li>不是关键字</li>
<li>开头不能是数字</li>
<li>只能由英文字母数字和下划线组成（不是-,而是_）</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">输入浮点数 <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a)</span><br><span class="line">输出浮点数 <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,a)</span><br></pre></td></tr></table></figure>

<p><em>TIPs：输入scanf变量时记得加””&amp;””</em></p>
<p>7*-9*10</p>
<h1 id="2-2-表达式"><a href="#2-2-表达式" class="headerlink" title="2.2 表达式"></a>2.2 表达式</h1><h2 id="复合运算符-x3D-x3D-x3D-x2F-x3D"><a href="#复合运算符-x3D-x3D-x3D-x2F-x3D" class="headerlink" title="复合运算符 +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D;"></a>复合运算符 +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D;</h2><p><img data-src="https://s2.loli.net/2022/08/03/Tae2JjB7LCZE9gS.png"></p>
]]></content>
      <categories>
        <category>C</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>第五章</title>
    <url>/2022/08/20/%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="5-1-第三种循环for"><a href="#5-1-第三种循环for" class="headerlink" title="5.1 第三种循环for"></a>5.1 第三种循环for</h1><h2 id="1-for-x3D-对于"><a href="#1-for-x3D-对于" class="headerlink" title="1) for &#x3D; 对于"></a>1) for &#x3D; 对于</h2><p><strong>例如:for(coun&#x3D;10;count&gt;0;count–)</strong></p>
<p><strong>对于一开始的count&#x3D;10,判断条件，然后做循环体，做完后执行count–,之后再判断……</strong></p>
<h6 id="TIPS-1-可以在for里面定义变量-该变量只在for中有用"><a href="#TIPS-1-可以在for里面定义变量-该变量只在for中有用" class="headerlink" title="TIPS:1. *可以在for里面定义变量,该变量只在for中有用*"></a>TIPS:1. *可以在for里面定义变量,<strong>该</strong>变量只在for中有用*</h6><h6 id="2-三个表达式中可以省略任意的表达式"><a href="#2-三个表达式中可以省略任意的表达式" class="headerlink" title="2. 三个表达式中可以省略任意的表达式"></a>2. <em>三个表达式中可以省略任意的表达式</em></h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;表达式;)== <span class="keyword">while</span>(表达式)</span><br></pre></td></tr></table></figure>

<h2 id="2-for-amp-while-amp-do-while的选择"><a href="#2-for-amp-while-amp-do-while的选择" class="headerlink" title="2) for &amp;while &amp;do_while的选择"></a>2) for &amp;while &amp;do_while的选择</h2><p><img data-src="http://tva1.sinaimg.cn/large/008tG9v6gy1h5g27wgp4ej30oh08bq44.jpg" alt="image.png"></p>
<h1 id="5-2循环控制"><a href="#5-2循环控制" class="headerlink" title="5.2循环控制"></a>5.2循环控制</h1><h2 id="1-用break-amp-continue控制循环"><a href="#1-用break-amp-continue控制循环" class="headerlink" title="1) 用break&amp;continue控制循环"></a>1) 用break&amp;continue控制循环</h2><p><strong>break:跳出循环</strong></p>
<p><strong>continue:跳过循环这一轮的语句进入下一轮</strong></p>
<h2 id="2-goto语句"><a href="#2-goto语句" class="headerlink" title="2)goto语句"></a>2)goto语句</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> 标记;</span><br><span class="line">标记:</span><br><span class="line">	语句</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TIPS:<em><strong>少用GOTO，goto是属于非线性的，用的多了，就会使得程序杂乱无章，难于阅读</strong></em></p>
<p>​		(<em>有时候确实很好用，高效省事</em>)</p>
]]></content>
      <categories>
        <category>C</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C Learning</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/09/01/%E7%AC%AC%E4%B9%9D%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="9-1-指针"><a href="#9-1-指针" class="headerlink" title="9.1 指针"></a>9.1 指针</h1><ul>
<li><p>%p表示输出变量的地址 </p>
</li>
<li><p>&amp;取地址符，取出变量的地址</p>
<p>地址的大小是否于int相等取决于编译器</p>
</li>
<li><h2 id="定义：就是保存地址的变量"><a href="#定义：就是保存地址的变量" class="headerlink" title="定义：就是保存地址的变量"></a>定义：就是保存地址的变量</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p,q;<span class="type">int</span> *p,q;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>两种语句都是表示只有p是指针，q是int</strong></p>
</li>
<li><h3 id="指针的作用：在代码块里面访问外面的变量"><a href="#指针的作用：在代码块里面访问外面的变量" class="headerlink" title="指针的作用：在代码块里面访问外面的变量"></a>指针的作用：在代码块里面访问外面的变量</h3><p>*加地址，可以访问地址上的变量(*是单目运算符)</p>
<p>*p既可以给其他变量赋值，也可以被赋值</p>
</li>
</ul>
<p>*<em>与&amp;互为逆运算</em></p>
<ul>
<li><p>传入函数的数组就是指针<br>sizeof(a) &#x3D;&#x3D; sizeof(int*)<br>但是这个指针可以 用运算符[]进行运算</p>
<h3 id="数组变量是特殊的指针"><a href="#数组变量是特殊的指针" class="headerlink" title="数组变量是特殊的指针"></a>数组变量是特殊的指针</h3><ul>
<li>数组变量 是 Const的指针</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> * <span class="type">const</span> p表示定义不可修改的指针</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p =&amp;i或者<span class="type">int</span> <span class="type">const</span> *p表示无法通过*p给所指变量赋值,</span><br><span class="line">而所指变量本身能被赋值,即*p = <span class="number">1</span>不可以; 而i =<span class="number">1</span>可以</span><br></pre></td></tr></table></figure>

<p><em>const在*前，为第二种 ，在*后，为第一种</em></p>
<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5s9yg12xvj30x80jwjvz.jpg" alt="image.png" style="zoom: 33%;" />

<ul>
<li>const 数组名表示数组里的元素全为const变量</li>
</ul>
<h1 id="9-2-指针运算"><a href="#9-2-指针运算" class="headerlink" title="9.2 指针运算"></a>9.2 指针运算</h1><p>指针+1移动到下一个储存变量的位置</p>
<p>指针与指针相加减的结果是中间变量的个数</p>
<ul>
<li>*p++意思是取出p所指的数据，之后再把p移到下一个位置<br>*p++可以只对应一条汇编指令，使得程序跑得快</li>
</ul>
<p>指针比较:数组中的单元的地址是线性递增的<br><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5sbj5weunj30qb0l2tdr.jpg" alt="image.png" style="zoom:50%;" /></p>
<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5sbn5a28sj30s90lngr3.jpg" alt="image.png" style="zoom: 33%;" />

<p><em>数组名没法运算</em></p>
<h1 id="指针的作用"><a href="#指针的作用" class="headerlink" title="指针的作用"></a>指针的作用</h1><ol>
<li>传入较大数据作为参数</li>
<li>传入数组后对数组做操作</li>
<li>函数返回不止一个结果</li>
<li>需要用函数来修改不止一个变量</li>
<li><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5sby415suj30re0k8gos.jpg" alt="image.png" style="zoom:50%;" />
没空间会返回0
***malloc之后一定要free***</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/08/30/%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="8-1-数组"><a href="#8-1-数组" class="headerlink" title="8.1 数组"></a>8.1 数组</h1><ul>
<li>是一种容器（放东西的东西），特点是：</li>
<li>其中所有的元素具有相同的数据类型</li>
<li>一旦创建，不能改变大小</li>
<li>（数据中的元素在内存中是连续依次排列的）</li>
</ul>
<h4 id="必须认为检查数组是否越界"><a href="#必须认为检查数组是否越界" class="headerlink" title="必须认为检查数组是否越界"></a>必须认为检查数组是否越界</h4>]]></content>
  </entry>
  <entry>
    <title>第六章</title>
    <url>/2022/08/27/%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="6-1-数据类型"><a href="#6-1-数据类型" class="headerlink" title="6.1 数据类型"></a>6.1 数据类型</h1><h2 id="1-整数"><a href="#1-整数" class="headerlink" title="1) 整数"></a>1) 整数</h2><p><em>bool char short int long ;long long</em></p>
<p>int 表达的是一个寄存器的大小，</p>
<h3 id="整数的输出"><a href="#整数的输出" class="headerlink" title="整数的输出"></a>整数的输出</h3><ul>
<li><p>%d(十进制):char short int</p>
</li>
<li><p>%u:unsigned</p>
</li>
<li><p>%ld: long; long long</p>
</li>
<li><p>%lu: unsigned long</p>
</li>
<li><p>%o表示输出八进制数字，%x表示输出十六进制数字 (<em>数字前面加0表示八进制，加0x表示十六进制</em>)</p>
</li>
<li><p>%X,大写X后可以将十六进制数字中的字母大写</p>
<h3 id="整数的输入"><a href="#整数的输入" class="headerlink" title="整数的输入"></a>整数的输入</h3><p>%hd是short</p>
</li>
</ul>
<p><em><strong>所有小于int的数据输出到printf时候,会先转化为int</strong></em></p>
<p> <em><strong>一个数据既可以当做不骂看待，又可以当作正常的二进制数看待，取决于输出的时候怎么用</strong></em></p>
<p><strong>所有的数据在计算机内部都是转化成二进制储存的</strong></p>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><ol>
<li><p>计算机所表达的数字永远不可能</p>
</li>
<li><p>%.xf x表示保留几位小数</p>
</li>
<li><table>
<thead>
<tr>
<th></th>
<th>输入</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>%f</td>
<td>%f,%e</td>
</tr>
<tr>
<td>double</td>
<td>%lf</td>
<td>%f,%e</td>
</tr>
</tbody></table>
</li>
</ol>
<p><em><strong>%e表示用科学计数法表示</strong></em></p>
<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><ol>
<li><p>%c表示字符的输入与输出</p>
</li>
<li><p>‘a’-‘A’表示两个字母之间的距离</p>
</li>
</ol>
<p><em>任意一个小写字母+’A’-‘a’可以将其转化为大写</em></p>
<h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><ul>
<li>自动类型转化</li>
</ul>
<ol>
<li>当运算符两边出现不一样的数据类型的时候，小的数据类型会被自动转化为大的数据类型</li>
<li>printf输出时，小于int的类型会被转化为int，float会被转化为double</li>
</ol>
<ul>
<li>强制类型转化</li>
</ul>
<ol>
<li>一般是大的改小的，最后只取小的那几位</li>
<li>不改变其原值</li>
<li>优先级高于四则运算</li>
</ol>
<h1 id="6-2-逻辑-条件运算"><a href="#6-2-逻辑-条件运算" class="headerlink" title="6.2 逻辑,条件运算"></a>6.2 逻辑,条件运算</h1>]]></content>
      <categories>
        <category>C</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>第四章</title>
    <url>/2022/08/14/%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="4-1循环语句"><a href="#4-1循环语句" class="headerlink" title="4.1循环语句"></a>4.1循环语句</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;循环体&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> </span><br><span class="line">&#123;</span><br><span class="line"> 	循环体  </span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件) ;</span><br></pre></td></tr></table></figure>



<h2 id="如何人工看程序运行结果"><a href="#如何人工看程序运行结果" class="headerlink" title="如何人工看程序运行结果"></a>如何人工看程序运行结果</h2><p><img data-src="https://s2.loli.net/2022/08/14/lYNLIhmA8CJpwGZ.png"></p>
]]></content>
      <categories>
        <category>C</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C Learning</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/09/03/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h1><ul>
<li><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tmae3nj0j30pu0kadii.jpg" alt="image.png" style="zoom: 33%;" />										

<ul>
<li><h2 id="func-代表当前函数的名称"><a href="#func-代表当前函数的名称" class="headerlink" title="***_func_***代表当前函数的名称"></a>***_<em>func</em>_***代表当前函数的名称</h2></li>
</ul>
</li>
</ul>
<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tmettn1sj30r20iugoq.jpg" alt="image.png" style="zoom: 33%;" />

<h2 id="静态本地变量"><a href="#静态本地变量" class="headerlink" title="静态本地变量"></a>静态本地变量</h2><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tml7a5i8j30tr0lldka.jpg" alt="image.png" style="zoom: 33%;" />

<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tmoqq42ej30ux0b4ju3.jpg" alt="image.png" style="zoom: 33%;" />

<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tmsl26dzj30tj0jeadp.jpg" alt="image.png" style="zoom: 33%;" />

<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tmter64wj30t90i7tbh.jpg" alt="image.png" style="zoom: 33%;" />

<h1 id="12-2-编译预处理和宏"><a href="#12-2-编译预处理和宏" class="headerlink" title="12.2 编译预处理和宏"></a>12.2 编译预处理和宏</h1><h2 id="编译预处理"><a href="#编译预处理" class="headerlink" title="编译预处理"></a>编译预处理</h2><ul>
<li>#开头的是编译预处理指令</li>
<li>#define 用来定义宏<br><em>它们不是C语言的成分，但是C语言程序离不开它</em></li>
</ul>
<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tn5emyw1j30ss0k8jv6.jpg" alt="image.png" style="zoom:33%;" />

<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tn61grn8j30rd0ju416.jpg" alt="image.png" style="zoom:33%;" />

<h3 id="预先定义的宏"><a href="#预先定义的宏" class="headerlink" title="预先定义的宏"></a>预先定义的宏</h3><ul>
<li>__LINE__代表源代码文件的行号</li>
<li>_<em>FILE</em>_ 代表源代码文件的文件名（包含路径）</li>
<li>_<em>DATE</em>_ 代表编译时日期</li>
<li>__TIME__代表编译时时间</li>
<li>__STDC__代表</li>
</ul>
<h2 id="带参数的宏：仅仅只是文本的替换！！！"><a href="#带参数的宏：仅仅只是文本的替换！！！" class="headerlink" title="带参数的宏：仅仅只是文本的替换！！！"></a>带参数的宏：<em>仅仅只是文本的替换！！！</em></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> cude(x) ((x)*(x)*(x))</span></span><br></pre></td></tr></table></figure>

<p>cube(5)会被替换为((5)*(5)*(5))</p>
<p>cube(i)会被替换为((i)*(i)*(i))</p>
<h3 id="定义带参数宏的原则"><a href="#定义带参数宏的原则" class="headerlink" title="定义带参数宏的原则"></a>定义带参数宏的原则</h3><ul>
<li><p>一切都要括号</p>
<ul>
<li>整个值要括号</li>
<li>参数出现的每个地方都要括号</li>
</ul>
</li>
<li><p>可以带多个参数</p>
</li>
<li><p>也可以嵌套宏</p>
</li>
<li><p>定义参数宏时不要带分号</p>
</li>
</ul>
<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tnjytrywj30oi0jfq5x.jpg" alt="image.png" style="zoom:33%;" />

<h1 id="12-3-大程序结构"><a href="#12-3-大程序结构" class="headerlink" title="12.3 大程序结构"></a>12.3 大程序结构</h1><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tnxy1jytj30tk0lfjvj.jpg" alt="image.png" style="zoom:33%;" />

<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tny83vkbj30q906zaav.jpg" alt="image.png" style="zoom:33%;" />

<h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><ul>
<li>把函数原型放到一个头文件中，在需要调用这个函数的源代码文件中#include这个头文件，<br>就能让编译器在编译的时候知道函数的原型</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5to70fhzoj30sw0kzjwm.jpg" alt="image.png" style="zoom:33%;" /></h2><ul>
<li>#include 是预处理指令，预处理时会进行文本替换</li>
</ul>
<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5toa3qhx2j30t50lidkq.jpg" alt="image.png" style="zoom:33%;" />

<h3 id="头文件使用注意事项："><a href="#头文件使用注意事项：" class="headerlink" title="头文件使用注意事项："></a>头文件使用注意事项：</h3><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tobqoc38j30t6070jtt.jpg" alt="image.png" style="zoom:33%;" />

<h4 id="不对外公开的函数"><a href="#不对外公开的函数" class="headerlink" title="不对外公开的函数"></a>不对外公开的函数</h4><ul>
<li>在函数前面加上static就使得它只能在所在的编译单元中被使用搞的函数</li>
<li>在全局变量前面加上static就使得它成为只能在所在的编译单元中被使用的全局变量</li>
</ul>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> 类型名 名称；这是变量的声明，而非函数的定义</span><br></pre></td></tr></table></figure>

<ul>
<li>声明不产生代码<ul>
<li>函数原型</li>
<li>变量声明</li>
<li>结构声明</li>
<li>宏声明</li>
<li>枚举声明</li>
<li>类型声明</li>
<li>inline函数</li>
</ul>
</li>
<li>定义是产生代码的东西</li>
</ul>
<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5ton42lx7j30sy0j2ada.jpg" alt="image.png" style="zoom:33%;" />

<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tou5sfi6j30xb0hugvk.jpg" alt="image.png" style="zoom:33%;" />

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/09/03/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="11-1-枚举"><a href="#11-1-枚举" class="headerlink" title="11.1 枚举"></a>11.1 枚举</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> 枚举类型名 &#123;</span>名称, , , &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>枚举量可以作为值</p>
</li>
<li><p>枚举类型可以跟上enum作为类型</p>
</li>
<li><p>实际上是以整数（int）来做内部计算和外部输入输出的</p>
<h5 id="套路：在enum最后加入一个变量，实现自动计数"><a href="#套路：在enum最后加入一个变量，实现自动计数" class="headerlink" title="套路：在enum最后加入一个变量，实现自动计数"></a><em>套路：在enum最后加入一个变量，实现自动计数</em></h5></li>
</ul>
<h1 id="11-2-结构"><a href="#11-2-结构" class="headerlink" title="11.2 结构"></a>11.2 结构</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构名字 &#123;</span>成员变量&#125;;<span class="comment">//声明结构类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> 结构名字 变量名字;</span><span class="comment">//声明结构变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    ...</span><br><span class="line">&#125; p1,p2;</span><br><span class="line">该结构没有名字，p1,p2为该结构的两个变量.</span><br><span class="line">变量名字.成员变量。</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构名字 变量名字 =</span> &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> 结构名字 变量名字 =</span> &#123;.成员变量=值&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数组与结构的区别："><a href="#数组与结构的区别：" class="headerlink" title="数组与结构的区别："></a>数组与结构的区别：</h4><ol>
<li>数组变量类型必须一样，而结构不必</li>
<li>数组用[]运算符和下标访问其成员</li>
<li>结构用.运算符和名字访问其成员</li>
<li><em><strong>结构变量的名字并不是其地址</strong></em></li>
</ol>
<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5thjftfpzj30ri0l9gqg.jpg" alt="image.png" style="zoom:50%;" />

<h2 id="结构与函数"><a href="#结构与函数" class="headerlink" title="结构与函数"></a>结构与函数</h2><p>结构可以作为函数参数</p>
<h2 id="输入并传输结构进入函数"><a href="#输入并传输结构进入函数" class="headerlink" title="输入并传输结构进入函数"></a>输入并传输结构进入函数</h2><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5ti2vq3jbj30s20ky78b.jpg" alt="image.png" style="zoom:50%;" />

<h1 id="11-3-联合"><a href="#11-3-联合" class="headerlink" title="11.3 联合"></a>11.3 联合</h1><h3 id="typedef-自定义类型"><a href="#typedef-自定义类型" class="headerlink" title="typedef 自定义类型"></a>typedef 自定义类型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Length;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样使得<strong>Length</strong>成为<strong>int</strong>类型的别名。<br>这样，Length可以代替int 出现在变量定义和参数声明的地方</li>
</ul>
<h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">AnElt</span> &#123;</span></span><br><span class="line"><span class="type">int</span>   i;</span><br><span class="line"><span class="type">char</span>  c;</span><br><span class="line">&#125; elt1, elt2;</span><br><span class="line">elt1.i = <span class="number">4</span>;</span><br><span class="line">elt2.c = ’a’;</span><br><span class="line">elt2.i = <span class="number">0xDEADBEEF</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>存储<ul>
<li>只为最大的成员分配空间</li>
<li>所有的成员共享⼀一个空间</li>
<li>同⼀一时间只有⼀一个成员是有效的</li>
<li>union的⼤大⼩小是其最⼤大的成员</li>
</ul>
</li>
<li>初始化<ul>
<li>对第⼀一个成员做初始化</li>
</ul>
</li>
</ul>
<h4 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h4><ul>
<li>用来查看内存储存变量的实际方式</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/09/02/%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h1 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h1><ol>
<li>自动存储期限 从声明，到函数结束</li>
<li>块作用域 {}</li>
</ol>
<h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h3><p>static 可以使函数拥有永久的存储单位，该程序运行期间一直保留其值,期限为整个程序运行期间<br>但其他函数无法访问它</p>
<h3 id="形式参数同局部变量"><a href="#形式参数同局部变量" class="headerlink" title="形式参数同局部变量"></a>形式参数同局部变量</h3><h1 id="外部变量（全局变量）"><a href="#外部变量（全局变量）" class="headerlink" title="外部变量（全局变量）"></a>外部变量（全局变量）</h1><ol>
<li>外部变量是声明在任何函数体之外的</li>
<li>静态存储期限，</li>
<li>文件作用域，作用域从声明开始到文件的末尾,一直可访问&#96;&#96;&#96;&#96;&#96;&#96;&#96;</li>
</ol>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul>
<li>压栈(push)：在栈顶加入一个数据项</li>
<li>出栈(pop)：从栈顶删除一个数据项</li>
</ul>
<p>无法对不在栈顶的数据项进行修改</p>
<h5 id="在C中实现栈"><a href="#在C中实现栈" class="headerlink" title="在C中实现栈"></a>在C中实现栈</h5><p><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5sdbm412zj30sw0enqc9.jpg" alt="image.png"></p>
<p>通过#if #ifdef来调试</p>
<p><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5tgx4557xj30sv0apacf.jpg" alt="image.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> XXX</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> XX</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> XXX</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/09/02/%E7%AC%AC%E5%8D%81%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="10-1-字符串"><a href="#10-1-字符串" class="headerlink" title="10.1 字符串"></a>10.1 字符串</h1><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5sh6krharj30um0lrdkr.jpg" alt="image.png" style="zoom: 33%;" />

<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5shirp5e5j30tk0iodiw.jpg" alt="image.png" style="zoom:50%;" />

<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5shn3c9nhj31820o5qb5.jpg" alt="image.png" style="zoom:33%;" />

<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5shpiz4zpj30qb0m3n0d.jpg" alt="image.png" style="zoom:50%;" />

<ul>
<li><p>%s输入输出字符串，输入时候读到空格tab或者回车为止</p>
<img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5si1g1ijqj30t30k4gop.jpg" alt="image.png" style="zoom:50%;" />

<p>指针必须初始化</p>
<h2 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h2><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5si9g11sxj30zk1hn4ft.jpg" alt="image.png" style="zoom: 50%;" />

<h1 id="10-2-字符串函数"><a href="#10-2-字符串函数" class="headerlink" title="10.2  字符串函数"></a>10.2  字符串函数</h1><h2 id="char-a"><a href="#char-a" class="headerlink" title="char *a[]"></a>char *a[]</h2><p><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5sihbxgdzj318k0hotey.jpg" alt="image.png"></p>
</li>
</ul>
<h2 id="程序输入原理"><a href="#程序输入原理" class="headerlink" title="程序输入原理"></a>程序输入原理</h2><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5siwa7haaj31030p5jz5.jpg" alt="image.png" style="zoom:50%;" />



<h2 id="strlen函数"><a href="#strlen函数" class="headerlink" title="strlen函数"></a>strlen函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(数组名) 输出数组长度</span><br></pre></td></tr></table></figure>

<h2 id="strcpy函数"><a href="#strcpy函数" class="headerlink" title="strcpy函数"></a>strcpy函数</h2><img data-src="https://tva1.sinaimg.cn/large/008tG9v6ly1h5t70xsy9wj30vx0ktq5i.jpg" alt="image.png" style="zoom:50%;" />

]]></content>
  </entry>
</search>
